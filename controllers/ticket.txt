exports.postTicketRequest = async (req, res) => {
	try {
		const {part_no, quantity, id} = req.body;

		const ticket = await Ticket.create({
			product_part_no: part_no,
			product_quantity: quantity,
			user_id: id,
		});

		const getStore = await Store.findOne({
			where: {product_part_no: part_no},
		});
		const getWarehouse = await Warehouse.findOne({
			where: {product_part_no: part_no},
		});

		const storeLimit = getStore.dataValues.product_limit;
		const storeTotal = getStore.dataValues.product_quantity;
		const warehouseLimit = getWarehouse.dataValues.product_limit;
		const warehouseTotal = getWarehouse.dataValues.product_quantity;

		if (quantity >= storeTotal && quantity >= warehouseTotal) {
			await Ticket.update(
				{status: "APPROVAL"},
				{where: {ticket_id: ticket.ticket_id}}
			);
		} else if (quantity >= storeTotal + warehouseTotal) {
			await Ticket.update(
				{status: "APPROVAL"},
				{where: {ticket_id: ticket.ticket_id}}
			);
		} else if (quantity <= storeTotal) {
			const updatedStoreTotal = storeTotal - quantity;
			await Store.update(
				{product_quantity: updatedStoreTotal},
				{where: {product_part_no: part_no}}
			);
			console.log("store updated");
		} else if (quantity >= storeTotal && quantity <= warehouseTotal) {
			if (storeLimit <= warehouseTotal) {
				const differenceAdded = storeLimit - storeTotal;
				const updatedStore = storeTotal + differenceAdded - quantity;
				const updateWarehouse = warehouseTotal - differenceAdded;
				await Warehouse.update(
					{product_quantity: updateWarehouse},
					{
						where: {product_part_no: part_no},
					}
				);
				await Store.update(
					{product_quantity: updatedStore},
					{
						where: {product_part_no: part_no},
					}
				);
			} else if (storeLimit > warehouseTotal) {
				const updatedStore = storeTotal + warehouseTotal - quantity;
				const updateWarehouse = 0;
				await Store.update(
					{product_quantity: updatedStore},
					{
						where: {product_part_no: part_no},
					}
				);
				await Warehouse.update(
					{product_quantity: updateWarehouse},
					{
						where: {product_part_no: part_no},
					}
				);
			}
		} else {
			await Ticket.update(
				{status: "APPROVAL"},
				{where: {ticket_id: ticket.ticket_id}}
			);
		}
	} catch (error) {
		console.log(error);
	}
};